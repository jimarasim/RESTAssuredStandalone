<?xml version="1.0" encoding="UTF-8"?>
<testng-results total="10" passed="9" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2023-06-11T19:03:23Z" name="Default Suite" finished-at="2023-06-11T19:03:45Z" duration-ms="21175">
    <groups>
    </groups>
    <test started-at="2023-06-11T19:03:23Z" name="RESTAssuredStandalone" finished-at="2023-06-11T19:03:45Z" duration-ms="21175">
      <class name="com.jaemzware.StuffedAnimalWarPostHappyPath">
        <test-method is-config="true" signature="initPath()[pri:0, instance:com.jaemzware.StuffedAnimalWarPostHappyPath@954b04f]" started-at="2023-06-11T12:03:43Z" name="initPath" finished-at="2023-06-11T12:03:43Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initPath -->
        <test-method signature="StuffedAnimalWarPostHappyPathTest()[pri:0, instance:com.jaemzware.StuffedAnimalWarPostHappyPath@954b04f]" started-at="2023-06-11T12:03:43Z" name="StuffedAnimalWarPostHappyPathTest" finished-at="2023-06-11T12:03:44Z" duration-ms="864" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- StuffedAnimalWarPostHappyPathTest -->
      </class> <!-- com.jaemzware.StuffedAnimalWarPostHappyPath -->
      <class name="com.jaemzware.BranchesGetAuthenticatedHappyPath">
        <test-method is-config="true" signature="initPath()[pri:0, instance:com.jaemzware.BranchesGetAuthenticatedHappyPath@545997b1]" started-at="2023-06-11T12:03:31Z" name="initPath" finished-at="2023-06-11T12:03:31Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initPath -->
        <test-method signature="BranchesGetAuthenticatedHappyPathTest()[pri:0, instance:com.jaemzware.BranchesGetAuthenticatedHappyPath@545997b1]" started-at="2023-06-11T12:03:31Z" name="BranchesGetAuthenticatedHappyPathTest" finished-at="2023-06-11T12:03:37Z" duration-ms="6040" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BranchesGetAuthenticatedHappyPathTest -->
      </class> <!-- com.jaemzware.BranchesGetAuthenticatedHappyPath -->
      <class name="com.jaemzware.UserNegNotAuthorized">
        <test-method is-config="true" signature="initPath()[pri:0, instance:com.jaemzware.UserNegNotAuthorized@306279ee]" started-at="2023-06-11T12:03:44Z" name="initPath" finished-at="2023-06-11T12:03:44Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initPath -->
        <test-method signature="UserNegNotAuthorizedTest()[pri:0, instance:com.jaemzware.UserNegNotAuthorized@306279ee]" started-at="2023-06-11T12:03:44Z" name="UserNegNotAuthorizedTest" finished-at="2023-06-11T12:03:44Z" duration-ms="142" status="FAIL">
          <exception class="groovy.lang.GroovyRuntimeException">
            <message>
              <![CDATA[could not access constructor: private java.lang.AssertionError(java.lang.String) with arguments: [1 expectation failed.
Expected status code <401> but was <200>.
] reason: java.lang.IllegalAccessException: class org.codehaus.groovy.reflection.CachedConstructor cannot access a member of class java.lang.AssertionError (in module java.base) with modifiers "private"]]>
            </message>
            <full-stacktrace>
              <![CDATA[groovy.lang.GroovyRuntimeException: could not access constructor: private java.lang.AssertionError(java.lang.String) with arguments: [1 expectation failed.
Expected status code <401> but was <200>.
] reason: java.lang.IllegalAccessException: class org.codehaus.groovy.reflection.CachedConstructor cannot access a member of class java.lang.AssertionError (in module java.base) with modifiers "private"
	at org.codehaus.groovy.reflection.CachedConstructor.createExceptionText(CachedConstructor.java:103)
	at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:89)
	at org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:77)
	at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallConstructor(CallSiteArray.java:60)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:235)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:247)
	at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:471)
	at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)
	at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:643)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:210)
	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:59)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:166)
	at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:122)
	at io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)
	at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:130)
	at io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:117)
	at com.jaemzware.UserNegNotAuthorized.UserNegNotAuthorizedTest(UserNegNotAuthorized.java:18)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:283)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:120)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
]]>
            </full-stacktrace>
          </exception> <!-- groovy.lang.GroovyRuntimeException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- UserNegNotAuthorizedTest -->
      </class> <!-- com.jaemzware.UserNegNotAuthorized -->
      <class name="com.jaemzware.ReposGetAuthenticatedHappyPath">
        <test-method signature="ReposGetAuthenticatedHappyPathTest()[pri:0, instance:com.jaemzware.ReposGetAuthenticatedHappyPath@149494d8]" started-at="2023-06-11T12:03:38Z" name="ReposGetAuthenticatedHappyPathTest" finished-at="2023-06-11T12:03:38Z" duration-ms="903" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ReposGetAuthenticatedHappyPathTest -->
        <test-method is-config="true" signature="initPath()[pri:0, instance:com.jaemzware.ReposGetAuthenticatedHappyPath@149494d8]" started-at="2023-06-11T12:03:38Z" name="initPath" finished-at="2023-06-11T12:03:38Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initPath -->
      </class> <!-- com.jaemzware.ReposGetAuthenticatedHappyPath -->
      <class name="com.jaemzware.UserGetHappyPath">
        <test-method is-config="true" signature="initPath()[pri:0, instance:com.jaemzware.UserGetHappyPath@1990a65e]" started-at="2023-06-11T12:03:44Z" name="initPath" finished-at="2023-06-11T12:03:44Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initPath -->
        <test-method signature="UserGetHappyPathTest()[pri:0, instance:com.jaemzware.UserGetHappyPath@1990a65e]" started-at="2023-06-11T12:03:44Z" name="UserGetHappyPathTest" finished-at="2023-06-11T12:03:44Z" duration-ms="128" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- UserGetHappyPathTest -->
      </class> <!-- com.jaemzware.UserGetHappyPath -->
      <class name="com.jaemzware.ReposGetAnonymousHappyPath">
        <test-method is-config="true" signature="initPath()[pri:0, instance:com.jaemzware.ReposGetAnonymousHappyPath@4cf4d528]" started-at="2023-06-11T12:03:37Z" name="initPath" finished-at="2023-06-11T12:03:37Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initPath -->
        <test-method signature="ReposGetAnonymousHappyPathTest()[pri:0, instance:com.jaemzware.ReposGetAnonymousHappyPath@4cf4d528]" started-at="2023-06-11T12:03:37Z" name="ReposGetAnonymousHappyPathTest" finished-at="2023-06-11T12:03:38Z" duration-ms="782" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ReposGetAnonymousHappyPathTest -->
      </class> <!-- com.jaemzware.ReposGetAnonymousHappyPath -->
      <class name="com.jaemzware.ReposNegPostAnonymous">
        <test-method is-config="true" signature="initPath()[pri:0, instance:com.jaemzware.ReposNegPostAnonymous@78186a70]" started-at="2023-06-11T12:03:38Z" name="initPath" finished-at="2023-06-11T12:03:38Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initPath -->
        <test-method signature="ReposNegPostAnonymousTest()[pri:0, instance:com.jaemzware.ReposNegPostAnonymous@78186a70]" started-at="2023-06-11T12:03:38Z" name="ReposNegPostAnonymousTest" finished-at="2023-06-11T12:03:39Z" duration-ms="121" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ReposNegPostAnonymousTest -->
      </class> <!-- com.jaemzware.ReposNegPostAnonymous -->
      <class name="com.jaemzware.BranchesGetAnonymousHappyPath">
        <test-method is-config="true" signature="initPath()[pri:0, instance:com.jaemzware.BranchesGetAnonymousHappyPath@481a15ff]" started-at="2023-06-11T12:03:23Z" name="initPath" finished-at="2023-06-11T12:03:24Z" duration-ms="201" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initPath -->
        <test-method signature="BranchesGetAnonymousHappyPathTest()[pri:0, instance:com.jaemzware.BranchesGetAnonymousHappyPath@481a15ff]" started-at="2023-06-11T12:03:24Z" name="BranchesGetAnonymousHappyPathTest" finished-at="2023-06-11T12:03:31Z" duration-ms="7065" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BranchesGetAnonymousHappyPathTest -->
      </class> <!-- com.jaemzware.BranchesGetAnonymousHappyPath -->
      <class name="com.jaemzware.StuffedAnimalWarAllPasswords">
        <test-method signature="StuffedAnimalWarPostHappyPathTest()[pri:0, instance:com.jaemzware.StuffedAnimalWarAllPasswords@710726a3]" started-at="2023-06-11T12:03:39Z" name="StuffedAnimalWarPostHappyPathTest" finished-at="2023-06-11T12:03:43Z" duration-ms="4769" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- StuffedAnimalWarPostHappyPathTest -->
        <test-method is-config="true" signature="initPath()[pri:0, instance:com.jaemzware.StuffedAnimalWarAllPasswords@710726a3]" started-at="2023-06-11T12:03:39Z" name="initPath" finished-at="2023-06-11T12:03:39Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initPath -->
      </class> <!-- com.jaemzware.StuffedAnimalWarAllPasswords -->
      <class name="com.jaemzware.UsersGetSpecificUserHappyPath">
        <test-method is-config="true" signature="initPath()[pri:0, instance:com.jaemzware.UsersGetSpecificUserHappyPath@646007f4]" started-at="2023-06-11T12:03:45Z" name="initPath" finished-at="2023-06-11T12:03:45Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initPath -->
        <test-method signature="UsersGetSpecificUserHappyPathTest()[pri:0, instance:com.jaemzware.UsersGetSpecificUserHappyPath@646007f4]" started-at="2023-06-11T12:03:45Z" name="UsersGetSpecificUserHappyPathTest" finished-at="2023-06-11T12:03:45Z" duration-ms="147" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- UsersGetSpecificUserHappyPathTest -->
      </class> <!-- com.jaemzware.UsersGetSpecificUserHappyPath -->
    </test> <!-- RESTAssuredStandalone -->
  </suite> <!-- Default Suite -->
</testng-results>
